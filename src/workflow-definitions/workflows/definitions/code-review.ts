import { WorkflowDefinition } from '../../workflow-engine/types/workflow';

export const codeReviewWorkflow: WorkflowDefinition = {
  id: 'code-review-workflow',
  name: 'AI Code Review',
  description: 'Automated code review using Cursor CLI',
  version: '1.0.0',
  tags: ['ai', 'review', 'development'],
  active: true,

  nodes: [
    {
      id: 'webhook-trigger',
      name: 'Webhook Trigger',
      type: 'n8n-nodes-base.webhook',
      typeVersion: 2,
      position: [240, 300],
      parameters: {
        httpMethod: 'POST',
        path: 'code-review',
        responseMode: 'responseNode',
        options: {
          responseContentType: 'json',
        },
      },
    },
    {
      id: 'extract-input',
      name: 'Extract Input Data',
      type: 'n8n-nodes-base.code',
      typeVersion: 2,
      position: [460, 300],
      parameters: {
        mode: 'runOnceForAllItems',
        jsCode: `
          // Extract and validate input data
          const inputData = $input.all();

          if (!inputData[0]?.json?.prompt) {
            throw new Error('Prompt is required');
          }

          return [{
            json: {
              prompt: inputData[0].json.prompt,
              projectPath: inputData[0].json.projectPath || process.cwd(),
              model: inputData[0].json.model || 'claude-4-sonnet',
              branch: inputData[0].json.branch || 'main',
              files: inputData[0].json.files || [],
            }
          }];
        `,
      },
    },
    {
      id: 'cursor-execute',
      name: 'Execute Cursor Review',
      type: 'custom-cursor-execute',
      typeVersion: 1,
      position: [680, 300],
      parameters: {
        prompt: `
          Review the following code for:
          1. Security vulnerabilities
          2. Performance issues
          3. Code quality and best practices
          4. Potential bugs
          5. Documentation needs

          Project: {{ $json.projectPath }}
          Branch: {{ $json.branch }}
          Files: {{ JSON.stringify($json.files) }}

          Please provide a comprehensive review with specific recommendations.
        `,
        projectPath: '{{ $json.projectPath }}',
        model: '{{ $json.model }}',
        timeout: 300,
      },
    },
    {
      id: 'parse-response',
      name: 'Parse Cursor Response',
      type: 'custom-cursor-parse',
      typeVersion: 1,
      position: [900, 300],
      parameters: {
        outputFormat: 'auto',
        extractCodeBlocks: true,
        extractSuggestions: true,
      },
    },
    {
      id: 'validate-output',
      name: 'Validate Review Quality',
      type: 'custom-cursor-validate',
      typeVersion: 1,
      position: [1120, 300],
      parameters: {
        validationRules: {
          rules: [
            {
              type: 'minLength',
              value: '100',
            },
            {
              type: 'contains',
              value: 'review',
            },
            {
              type: 'noErrors',
            },
          ],
        },
        extractMetrics: true,
      },
    },
    {
      id: 'create-github-comment',
      name: 'Create GitHub Comment',
      type: 'n8n-nodes-base.github',
      typeVersion: 1,
      position: [1340, 200],
      parameters: {
        operation: 'createComment',
        repository: '={{ $json.repository }}',
        issueNumber: '={{ $json.prNumber }}',
        body: `
          ## ðŸ¤– AI Code Review

          **Review Summary:**
          {{ $json.parsedOutput.title || "Code Review Completed" }}

          **Key Findings:**
          {{ $json.suggestions.slice(0, 5).join("\\n- ") }}

          **Confidence:** {{ $json.confidence }}%
          **Review Time:** {{ $json.metrics.wordCount }} words analyzed

          _Generated by Cursor CLI via N8N automation_
        `,
      },
      credentials: {
        githubApi: {
          id: 'github-token',
          name: 'GitHub API Token',
        },
      },
    },
    {
      id: 'success-response',
      name: 'Success Response',
      type: 'n8n-nodes-base.respondToWebhook',
      typeVersion: 1,
      position: [1560, 200],
      parameters: {
        respondWith: 'json',
        responseBody: `{
          "success": true,
          "message": "Code review completed",
          "reviewId": "{{ $json.executionId }}",
          "findings": {{ $json.suggestions.length }},
          "confidence": "{{ $json.confidence }}%"
        }`,
      },
    },
    {
      id: 'error-response',
      name: 'Error Response',
      type: 'n8n-nodes-base.respondToWebhook',
      typeVersion: 1,
      position: [1560, 400],
      parameters: {
        respondWith: 'json',
        responseBody: `{
          "success": false,
          "error": "{{ $json.error }}",
          "validationIssues": {{ $json.issues | length }}
        }`,
      },
    },
  ],

  connections: {
    'Webhook Trigger': {
      main: [
        [
          {
            node: 'Extract Input Data',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Extract Input Data': {
      main: [
        [
          {
            node: 'Cursor Execute',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Cursor Execute': {
      main: [
        [
          {
            node: 'Parse Response',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Parse Response': {
      main: [
        [
          {
            node: 'Validate Output',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Validate Output': {
      main: [
        [
          {
            node: 'Create GitHub Comment',
            type: 'main',
            index: 0,
          },
        ],
        [
          {
            node: 'Success Response',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Create GitHub Comment': {
      main: [
        [
          {
            node: 'Success Response',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
    'Validate Output': {
      main: [
        [
          {
            node: 'Error Response',
            type: 'main',
            index: 0,
          },
        ],
      ],
    },
  },

  settings: {
    executionOrder: 'v1',
    saveExecutionProgress: true,
    saveManualExecutions: false,
    saveDataErrorExecution: 'all',
    saveDataSuccessExecution: 'all',
    timezone: 'America/New_York',
  },

  meta: {
    templateId: 'code-review-template',
    instanceId: 'production',
  },
};

